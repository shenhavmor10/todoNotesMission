{"version":3,"sources":["GlobalNotes.tsx","components/Note.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ITodo","todoId","title","completed","INotes","_id","id","noteName","todos","dateCreated","Date","lastUpdated","myNotes","axios","get","homePage","notes","data","delete","note","post","this","getInitialData","patch","currentNotesCount","maxNotes","newNote","length","console","log","push","addNoteToServer","findIndex","todoName","newTodo","updateNoteToServer","idNote","idTodo","replace","filter","deleteNoteToServer","observable","Note","props","state","checked","Header","className","as","Button","onClick","e","deleteNote","basic","color","content","Form","onSubmit","addTodo","setState","Field","value","onChange","target","placeholder","map","todo","key","Checkbox","markComplete","Component","App","observer","textAlign","popupMessage","addNote","secondary","Card","centered","header","findNote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0533f1c3.chunk.js","sourcesContent":["import {observable,IObservableArray} from 'mobx';\r\nimport axios from 'axios';\r\n\r\nexport class ITodo{\r\n    todoId:number=0;\r\n    title:string='';\r\n    completed:boolean=false;\r\n  }\r\n\r\nexport class INotes{\r\n    _id?:string;\r\n    id:number=0;\r\n    noteName:string='';\r\n    todos:ITodo[]=[];\r\n    dateCreated:Date=new Date();\r\n    lastUpdated:Date=new Date();\r\n  }\r\n\r\nclass GlobalNotes {\r\n    \r\n    @observable notes:IObservableArray<INotes>=observable([]);\r\n    @observable maxNotes:number=10;\r\n    @observable currentNotesCount=0;\r\n    @observable popupMessage:string='You have the max amount of notes !! if you want to add more notes \\n please remove some in order to make new ones.';\r\n    public async getInitialData()\r\n    {\r\n      const homePage=await axios.get('http://localhost:3010/notes');\r\n      myNotes.notes=homePage.data;\r\n    }\r\n    public async deleteNoteToServer(_id?:string){\r\n      await axios.delete('http://localhost:3010/notes/'+_id);\r\n    }\r\n    public async addNoteToServer(note:INotes){\r\n      await axios.post('http://localhost:3010/notes',note);\r\n      this.getInitialData();\r\n    }\r\n    public async updateNoteToServer(note:INotes){\r\n      await axios.patch('http://localhost:3010/notes/'+note._id,note);\r\n    }\r\n    public addNote(noteName:string){\r\n        if(this.currentNotesCount<this.maxNotes)\r\n        {\r\n          const newNote = new INotes();\r\n          if(myNotes.notes.length===0)\r\n          {\r\n            newNote.id=0;\r\n          }\r\n          else\r\n          {\r\n            newNote.id=myNotes.notes[myNotes.notes.length-1].id+1;\r\n          }\r\n          console.log(newNote.id);\r\n          newNote.noteName=noteName;\r\n          this.notes.push(newNote);\r\n          this.currentNotesCount=this.currentNotesCount+1;\r\n          console.log(\"before\");\r\n          this.addNoteToServer(newNote);\r\n          console.log(\"after\");\r\n        }\r\n\r\n\r\n      }\r\n    public findNote(id:number)\r\n    {\r\n      return this.notes.findIndex(note=>note.id===id);\r\n      \r\n    }\r\n    public addTodo(id:number,todoName:string){\r\n        const newTodo = new ITodo();\r\n        newTodo.todoId=myNotes.notes[id].todos.length;\r\n        newTodo.title=todoName;\r\n        this.notes[id].todos.push(newTodo);\r\n        this.updateNoteToServer(myNotes.notes[id]);\r\n        \r\n    }\r\n    public markComplete(idNote:number,idTodo:number){\r\n        myNotes.notes[idNote].todos[idTodo].completed=!myNotes.notes[idNote].todos[idTodo].completed;\r\n        this.updateNoteToServer(myNotes.notes[idNote]);\r\n\r\n    }\r\n    public deleteNote(id:number,_id:string){\r\n      this.notes.replace([...this.notes.filter(note=>note.id!==id)]);\r\n      this.currentNotesCount=this.currentNotesCount-1;\r\n      this.deleteNoteToServer(_id);\r\n    }\r\n      \r\n}\r\nconst myNotes=new GlobalNotes();\r\nexport default myNotes;","import React, { Component} from 'react';\r\nimport myNotes from '../GlobalNotes';\r\nimport {Header,Form,Button,Checkbox} from 'semantic-ui-react'\r\n\r\ninterface Iprops{\r\n   id:number;\r\n}\r\ninterface Istate{\r\n    todoName:string;\r\n    checked:boolean;\r\n}\r\n\r\n\r\nclass Note extends Component<Iprops,Istate> {\r\n   constructor(props:Readonly<Iprops>){\r\n       super(props);\r\n       this.state={\r\n        todoName:\"\",\r\n        checked:false\r\n       }\r\n   }\r\n   render() {\r\n    return(\r\n    <>\r\n    <Header className = \"headerNote\" as = \"h3\">\r\n    {myNotes.notes[this.props.id].noteName}\r\n        \r\n        <Button onClick={(e)=>{\r\n            myNotes.deleteNote(myNotes.notes[this.props.id].id,myNotes.notes[this.props.id]._id);\r\n        }} className = 'my-space' basic color='red' content='X' />\r\n    </Header>\r\n    <Form onSubmit ={(e)=>{\r\n        myNotes.addTodo(this.props.id,this.state.todoName);\r\n        this.setState({todoName:\"\"})\r\n      }}\r\n      >\r\n        <Form.Field>\r\n            \r\n            <input className = 'my-InputTodo' value = {this.state.todoName} onChange={(e)=>{\r\n            this.setState({todoName:e.target.value}) \r\n            }} placeholder='Enter todo : '/>\r\n            <Button className = \"ui primary button\">Submit</Button>\r\n        </Form.Field>\r\n    </Form> \r\n    <Form>\r\n        {myNotes.notes[this.props.id].todos.map((todo)=>{\r\n            return(\r\n                    <div className = \"my-grid\" key = {todo.todoId}>\r\n                    <Checkbox checked = {todo.completed} onChange={(e)=>{\r\n                        myNotes.markComplete(this.props.id,todo.todoId);\r\n                        this.setState({checked:true})\r\n                    }}\r\n                    ></Checkbox>\r\n                     {todo.title}\r\n                    </div>\r\n                    \r\n                )\r\n        })\r\n      }\r\n      </Form>\r\n      </>)\r\n   }\r\n      \r\n}\r\n\r\nexport default Note;\r\n","import React, { Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport {Button ,Form,Header,Card} from 'semantic-ui-react'\nimport './App.css';\nimport myNotes from './GlobalNotes';\nimport Note from './components/Note' \nimport 'semantic-ui-css/semantic.min.css'\n\ninterface Iprops{\n\n}\n\ninterface Istate{\n  noteName:string;\n}\n\n@observer\nclass App extends Component<Iprops,Istate> {\n  constructor(props:Readonly<Iprops>){\n    super(props);\n    this.state = {\n      noteName: \"\"\n    }\n    myNotes.getInitialData()\n  }\n  render(){\n    return (<div className = \"myHeader\">\n      <Header className = 'my-Colors' as = \"h1\"textAlign='center'>Notes & Todos</Header>\n      {myNotes.notes.length===myNotes.maxNotes&&<Header as =\"h2\">{myNotes.popupMessage}</Header>}\n        <Form onSubmit ={(e)=>{\n          myNotes.addNote(this.state.noteName);\n          this.setState({noteName:\"\"})\n        }}\n        >\n        <Form.Field className = 'myHeader'>\n          <input className = \"my-Input\" value = {this.state.noteName} onChange={(e)=>{\n          this.setState({noteName:e.target.value});\n        }} placeholder='Enter note : '/>\n        <Button secondary className = \"my-Input\">Submit</Button>\n        </Form.Field>\n        </Form>  \n      \n      {myNotes.notes.map((note)=>{\n        return(\n\n          <Card className = 'my-card' centered color ='red' header ='a'>\n            <Note key = {note.id} id={myNotes.findNote(note.id)} >\n            </Note>\n          </Card>\n\n  \n        )\n\n      })\n\n    }\n    \n      </div>\n    )}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}